Задание: Создание веб-API для проекта "Каталог книг" на C# (ASP.NET Core)

Цель:

Создать RESTful веб-API, которое предоставляет CRUD-операции (создание, чтение, обновление, удаление) для управления каталогом книг.

Компоненты:

- База данных: MS SQL Server, SQLite или PostgreSQL.
- ORM: Entity Framework Core
- Платформа: язык C# и ASP.NET Core 8.0;

Описание предметной области:
- В предметной области "Каталог книг" существуеют всего две сущности: Книга и Автор книги.
- Одна книга может быть написана несколькими авторами, причем среди них обязательно будет только один главный автор, остальные соавторы.
- Один автор может написать несколько книг.

Книга имеет следующие свойства:
1. Id - целочисленные иденитификатор книги;
2. Title - название книги. Обязательное текстовое поле, максимальный размер: 50 символов;
3. Description - описание книги. Обязательное текстовое поле, макимальный размер: 500 символов;

Автор имеет следующие свойства:
1. Id - целочисленные иденитификатор автора;
2. LastName - фамилия автора. Обязательное текстовое поле. Минимальный размер: 2 символа, максимальный размер: 25 символов;
3. FirstName - имя автора. Обязательное текстовое поле. Минимальный размер: 2 символа, максимальный размер: 25 символов;

Валидация: Применить атрибуты валидации для проверки входных данных запросов.
Правило валидации для автора: если LastName на английском языке, то и FirstName соответственно тоже, иначе ошибка. если LastName на русском языке, то аналогично.

Контроллеры: Создать контроллеры для обработки запросов к API:
1. BooksController: Для управления книгами.
2. AuthorsController: Для управления авторами.

Обработка ошибок: Предусмотреть обработку ошибок и возврат понятных сообщений об ошибках.

Документация: Создать документацию по использованию API с помощью Swagger.

Сроки:

- Завершить проект в течение 5 дней.

Ожидаемый результат:

- Функциональный веб-API для каталога книг с операциями CRUD.
- Документированный API, доступный для использования.
- Чистота кода. Очень приветствуются комментарии типа <summary></summary>;
- Разделение кода на слои абстракции приветствуются (Presentation, Application, Domain/Core, Infrastructure).
- Будет плюсом использование миграций Entity Framework Core.
